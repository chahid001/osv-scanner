package osvscanner

import (
	"reflect"
	"testing"

	"github.com/google/osv-scanner/pkg/lockfile"
	"github.com/google/osv-scanner/pkg/models"
	"github.com/google/osv-scanner/pkg/osv"
	"github.com/google/osv-scanner/pkg/reporter"
)

func Test_assembleResult(t *testing.T) {
	t.Parallel()
	type args struct {
		r            reporter.Reporter
		packages     []scannedPackage
		vulnsResp    *osv.HydratedBatchedResponse
		licensesResp [][]models.License
		actions      ScannerActions
	}
	packages := []scannedPackage{
		{
			Name:      "pkg-1",
			Ecosystem: lockfile.Ecosystem("npm"),
			Version:   "1.0.0",
			Source: models.SourceInfo{
				Path: "dir/package-lock.json",
				Type: "lockfile",
			},
		},
		{
			Name:      "pkg-2",
			Ecosystem: lockfile.Ecosystem("npm"),
			Version:   "1.0.0",
			Source: models.SourceInfo{
				Path: "dir/package-lock.json",
				Type: "lockfile",
			},
		},
		{
			Name:      "pkg-3",
			Ecosystem: lockfile.Ecosystem("npm"),
			Version:   "1.0.0",
			Source: models.SourceInfo{
				Path: "other-dir/package-lock.json",
				Type: "lockfile",
			},
		},
	}
	vulnsResp := &osv.HydratedBatchedResponse{
		Results: []osv.Response{
			{Vulns: models.Vulnerabilities([]models.Vulnerability{
				{
					ID:      "GHSA-123",
					Aliases: []string{"CVE-123"},
				}, {
					ID: "CVE-123",
				},
			})},
			{Vulns: models.Vulnerabilities{}},
			{Vulns: models.Vulnerabilities([]models.Vulnerability{
				{
					ID: "GHSA-456",
				},
			})},
		},
	}
	licensesResp := [][]models.License{
		{models.License("MIT"), models.License("0BSD")},
		{models.License("MIT")},
		{models.License("UNKNOWN")},
	}

	callAnalysisStates := make(map[string]bool)

	tests := []struct {
		name string
		args args
		want models.VulnerabilityResults
	}{{
		name: "group vulnerabilities",
		args: args{
			r:            &reporter.VoidReporter{},
			packages:     packages,
			vulnsResp:    vulnsResp,
			licensesResp: licensesResp,
			actions: ScannerActions{
				ExperimentalScannerActions: ExperimentalScannerActions{
					ShowAllPackages:       false,
					ScanLicensesAllowlist: nil,
				},
				CallAnalysisStates: callAnalysisStates,
			},
		},
		want: models.VulnerabilityResults{
			Results: []models.PackageSource{
				{
					Source: models.SourceInfo{
						Path: "dir/package-lock.json",
						Type: "lockfile",
					},
					Packages: []models.PackageVulns{
						{
							Package: models.PackageInfo{
								Name:      "pkg-1",
								Ecosystem: "npm",
								Version:   "1.0.0",
							},
							Vulnerabilities: []models.Vulnerability{
								{
									ID:      "GHSA-123",
									Aliases: []string{"CVE-123"},
								},
								{
									ID: "CVE-123",
								},
							},
							Groups: []models.GroupInfo{
								{
									IDs:     []string{"CVE-123", "GHSA-123"},
									Aliases: []string{"CVE-123", "GHSA-123"},
								},
							},
						},
					},
				},
				{
					Source: models.SourceInfo{
						Path: "other-dir/package-lock.json",
						Type: "lockfile",
					},
					Packages: []models.PackageVulns{
						{
							Package: models.PackageInfo{
								Name:      "pkg-3",
								Ecosystem: "npm",
								Version:   "1.0.0",
							},
							Vulnerabilities: []models.Vulnerability{
								{ID: "GHSA-456"},
							},
							Groups: []models.GroupInfo{
								{
									IDs:     []string{"GHSA-456"},
									Aliases: []string{"GHSA-456"},
								},
							},
						},
					},
				},
			},
		},
	}, {
		name: "group vulnerabilities, with all packages included",
		args: args{
			r:            &reporter.VoidReporter{},
			packages:     packages,
			vulnsResp:    vulnsResp,
			licensesResp: licensesResp,
			actions: ScannerActions{
				ExperimentalScannerActions: ExperimentalScannerActions{
					ShowAllPackages:       true,
					ScanLicensesAllowlist: nil,
				},
				CallAnalysisStates: callAnalysisStates,
			},
		},
		want: models.VulnerabilityResults{
			Results: []models.PackageSource{
				{
					Source: models.SourceInfo{
						Path: "dir/package-lock.json",
						Type: "lockfile",
					},
					Packages: []models.PackageVulns{
						{
							Package: models.PackageInfo{
								Name:      "pkg-1",
								Ecosystem: "npm",
								Version:   "1.0.0",
							},
							Vulnerabilities: []models.Vulnerability{
								{
									ID:      "GHSA-123",
									Aliases: []string{"CVE-123"},
								},
								{
									ID: "CVE-123",
								},
							},
							Groups: []models.GroupInfo{
								{
									IDs:     []string{"CVE-123", "GHSA-123"},
									Aliases: []string{"CVE-123", "GHSA-123"},
								},
							},
						}, {
							Package: models.PackageInfo{
								Name:      "pkg-2",
								Ecosystem: "npm",
								Version:   "1.0.0",
							},
						},
					},
				},
				{
					Source: models.SourceInfo{
						Path: "other-dir/package-lock.json",
						Type: "lockfile",
					},
					Packages: []models.PackageVulns{
						{
							Package: models.PackageInfo{
								Name:      "pkg-3",
								Ecosystem: "npm",
								Version:   "1.0.0",
							},
							Vulnerabilities: []models.Vulnerability{
								{ID: "GHSA-456"},
							},
							Groups: []models.GroupInfo{
								{
									IDs:     []string{"GHSA-456"},
									Aliases: []string{"GHSA-456"},
								},
							},
						},
					},
				},
			},
		},
	}, {
		name: "group vulnerabilities with licenses",
		args: args{
			r:            &reporter.VoidReporter{},
			packages:     packages,
			vulnsResp:    vulnsResp,
			licensesResp: licensesResp,
			actions: ScannerActions{
				ExperimentalScannerActions: ExperimentalScannerActions{
					ShowAllPackages:       true,
					ScanLicensesSummary:   true,
					ScanLicensesAllowlist: nil,
				},
				CallAnalysisStates: callAnalysisStates,
			},
		},
		want: models.VulnerabilityResults{
			ExperimentalAnalysisConfig: models.ExperimentalAnalysisConfig{
				Licenses: models.ExperimentalLicenseConfig{
					Summary:   true,
					Allowlist: []models.License{},
				},
			},
			Results: []models.PackageSource{
				{
					Source: models.SourceInfo{
						Path: "dir/package-lock.json",
						Type: "lockfile",
					},
					Packages: []models.PackageVulns{
						{
							Package: models.PackageInfo{
								Name:      "pkg-1",
								Ecosystem: "npm",
								Version:   "1.0.0",
							},
							Vulnerabilities: []models.Vulnerability{
								{
									ID:      "GHSA-123",
									Aliases: []string{"CVE-123"},
								},
								{
									ID: "CVE-123",
								},
							},
							Groups: []models.GroupInfo{
								{
									IDs:     []string{"CVE-123", "GHSA-123"},
									Aliases: []string{"CVE-123", "GHSA-123"},
								},
							},
							Licenses: makeLicenses([]string{"MIT", "0BSD"}),
						}, {
							Package: models.PackageInfo{
								Name:      "pkg-2",
								Ecosystem: "npm",
								Version:   "1.0.0",
							},
							Licenses: makeLicenses([]string{"MIT"}),
						},
					},
				},
				{
					Source: models.SourceInfo{
						Path: "other-dir/package-lock.json",
						Type: "lockfile",
					},
					Packages: []models.PackageVulns{
						{
							Package: models.PackageInfo{
								Name:      "pkg-3",
								Ecosystem: "npm",
								Version:   "1.0.0",
							},
							Vulnerabilities: []models.Vulnerability{
								{ID: "GHSA-456"},
							},
							Groups: []models.GroupInfo{
								{
									IDs:     []string{"GHSA-456"},
									Aliases: []string{"GHSA-456"},
								},
							},
							Licenses: makeLicenses([]string{"UNKNOWN"}),
						},
					},
				},
			},
		},
	}, {
		name: "group vulnerabilities with license allowlist",
		args: args{
			r:            &reporter.VoidReporter{},
			packages:     packages,
			vulnsResp:    vulnsResp,
			licensesResp: licensesResp,
			actions: ScannerActions{
				ExperimentalScannerActions: ExperimentalScannerActions{
					ShowAllPackages:       false,
					ScanLicensesAllowlist: []string{"MIT", "0BSD"},
				},
				CallAnalysisStates: callAnalysisStates,
			},
		},
		want: models.VulnerabilityResults{
			ExperimentalAnalysisConfig: models.ExperimentalAnalysisConfig{
				Licenses: models.ExperimentalLicenseConfig{
					Allowlist: []models.License{models.License("MIT"), models.License("0BSD")},
				},
			},
			Results: []models.PackageSource{
				{
					Source: models.SourceInfo{
						Path: "dir/package-lock.json",
						Type: "lockfile",
					},
					Packages: []models.PackageVulns{
						{
							Package: models.PackageInfo{
								Name:      "pkg-1",
								Ecosystem: "npm",
								Version:   "1.0.0",
							},
							Vulnerabilities: []models.Vulnerability{
								{
									ID:      "GHSA-123",
									Aliases: []string{"CVE-123"},
								},
								{
									ID: "CVE-123",
								},
							},
							Groups: []models.GroupInfo{
								{
									IDs:     []string{"CVE-123", "GHSA-123"},
									Aliases: []string{"CVE-123", "GHSA-123"},
								},
							},
							Licenses: makeLicenses([]string{"MIT", "0BSD"}),
						},
					},
				},
				{
					Source: models.SourceInfo{
						Path: "other-dir/package-lock.json",
						Type: "lockfile",
					},
					Packages: []models.PackageVulns{
						{
							Package: models.PackageInfo{
								Name:      "pkg-3",
								Ecosystem: "npm",
								Version:   "1.0.0",
							},
							Vulnerabilities: []models.Vulnerability{
								{ID: "GHSA-456"},
							},
							Groups: []models.GroupInfo{
								{
									IDs:     []string{"GHSA-456"},
									Aliases: []string{"GHSA-456"},
								},
							},
							Licenses:          makeLicenses([]string{"UNKNOWN"}),
							LicenseViolations: makeLicenses([]string{"UNKNOWN"}),
						},
					},
				},
			},
		},
	}, {
		name: "group vulnerabilities, with license allowlist and all packages",
		args: args{
			r:            &reporter.VoidReporter{},
			packages:     packages,
			vulnsResp:    vulnsResp,
			licensesResp: licensesResp,
			actions: ScannerActions{
				ExperimentalScannerActions: ExperimentalScannerActions{
					ShowAllPackages:       true,
					ScanLicensesAllowlist: []string{"MIT", "0BSD"},
				},
				CallAnalysisStates: callAnalysisStates,
			},
		},
		want: models.VulnerabilityResults{
			ExperimentalAnalysisConfig: models.ExperimentalAnalysisConfig{
				Licenses: models.ExperimentalLicenseConfig{
					Allowlist: []models.License{models.License("MIT"), models.License("0BSD")},
				},
			},
			Results: []models.PackageSource{
				{
					Source: models.SourceInfo{
						Path: "dir/package-lock.json",
						Type: "lockfile",
					},
					Packages: []models.PackageVulns{
						{
							Package: models.PackageInfo{
								Name:      "pkg-1",
								Ecosystem: "npm",
								Version:   "1.0.0",
							},
							Vulnerabilities: []models.Vulnerability{
								{
									ID:      "GHSA-123",
									Aliases: []string{"CVE-123"},
								},
								{
									ID: "CVE-123",
								},
							},
							Groups: []models.GroupInfo{
								{
									IDs:     []string{"CVE-123", "GHSA-123"},
									Aliases: []string{"CVE-123", "GHSA-123"},
								},
							},
							Licenses: makeLicenses([]string{"MIT", "0BSD"}),
						}, {
							Package: models.PackageInfo{
								Name:      "pkg-2",
								Ecosystem: "npm",
								Version:   "1.0.0",
							},
							Licenses: makeLicenses([]string{"MIT"}),
						},
					},
				},
				{
					Source: models.SourceInfo{
						Path: "other-dir/package-lock.json",
						Type: "lockfile",
					},
					Packages: []models.PackageVulns{
						{
							Package: models.PackageInfo{
								Name:      "pkg-3",
								Ecosystem: "npm",
								Version:   "1.0.0",
							},
							Vulnerabilities: []models.Vulnerability{
								{ID: "GHSA-456"},
							},
							Groups: []models.GroupInfo{
								{
									IDs:     []string{"GHSA-456"},
									Aliases: []string{"GHSA-456"},
								},
							},
							Licenses:          makeLicenses([]string{"UNKNOWN"}),
							LicenseViolations: makeLicenses([]string{"UNKNOWN"}),
						},
					},
				},
			},
		},
	}}
	for _, tt := range tests {
		tt := tt // Reinitialize for t.Parallel()
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			if got := buildVulnerabilityResults(tt.args.r, tt.args.packages, tt.args.vulnsResp, tt.args.licensesResp, tt.args.actions); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("buildVulnerabilityResults() = %v,\nwant %v", got, tt.want)
			}
		})
	}
}

func makeLicenses(strLicenses []string) []models.License {
	licenses := make([]models.License, len(strLicenses))
	for i, l := range strLicenses {
		licenses[i] = models.License(l)
	}

	return licenses
}
